plugins {
    id 'maven-publish'
    alias libs.plugins.fabric.loom
    alias libs.plugins.quiltflower
}

version = project.mod_version
group = project.maven_group

allprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
    version = project.mod_version + "+1.18.2"

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven { url "https://maven.quiltmc.org/repository/release" }
    }

    dependencies {
        // To change the versions see the gradle/libs.versions.toml file
        minecraft libs.minecraft
        mappings(loom.layered {
            it.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2")
        })
        modImplementation libs.fabric.loader

        // Mod dependencies
        modImplementation libs.fabric.api
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    tasks.withType(JavaCompile) {
        javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    }

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "LICENSE_${project.archivesBaseName.replace('-', '_')}" }
        }
    }
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'
    apply plugin: 'io.github.juuxel.loom-quiltflower'

    // configure the maven publication
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }
}

dependencies {
    implementation project(path: ":pets_from_the_inventory-core", configuration: "namedElements")
    implementation project(path: ":pets_from_the_inventory-fabric", configuration: "namedElements")
}

loom {
    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=pfti"

            runDir "build/datagen"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}